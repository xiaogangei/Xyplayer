/*
 软件名称：xyplayer
 软件版本：X3 体验版
 软件作者：http://baidu.com
 --------------------------------------------------------------------------------------------------------------------
 开发说明：
 使用的主要程序语言：javascript(js,jquery)及php;
 功能：视频解析;
 特点：支持对接一次解析,搜索资源站资源,支持线路切换,剧集列表,自动播放下集等；
 =====================================================================================================================
 */
/* global opera, java, Base64, top, _GET*/

!(function () {
    'use strict';  
    var $this;
    var xyplayer = function (c)
    {
        //显示版权信息
        this.onVer();
        //全局变量,方便全局操作。
        $this = this;
        //全局变量，网址url参数,取"?url="后面全部文本。
        this.url = _GET("url", true) || _GET("v", true);
        //全局变量，网址wd参数 
        this.wd = _GET("wd");
        var han = (_GET("v"));
        //网址v参数中文输入智能检测
        var vid = _GET("v",true);
        if (vid) {
            if (vid.search(/^[\u4e00-\u9fa5]+/) !== -1) {
                this.wd = vid;
            } else {
                this.url = vid;
            }
        }
        //全局变量，网址id参数		
        this.id = _GET("id");
        //全局变量，网址flag参数		
        this.flag = _GET("flag");
        //全局变量，网址type参数
        this.type = _GET("type");
        //全局变量,线路切换图标容器
        this.logo = c.logo || '.logo';
        //全局变量,剧集切换图标容器
        this.list = c.list || '.list';
        //全局变量,线路列表容器		   
        this.line = c.line || '#line';
        //全局变量,播放列表容器
        this.plist = c.plist || '#list';
        //全局变量,播放列表 来源列表容器	   
        this.flaglist = c.flaglist || '#flaglist';
        //全局变量,播放列表 视频列表容器
        this.playlist = c.playlist || '#playlist';
        //全局变量,视频容器
        this.player = c.player || '#player';
        //全局变量,直播容器
        this.plive = c.plive || '#live';
        //全局变量,广告容器		
        this.playad = c.playad || '#playad';
        //全局变量,是否自动隐藏
        this.autohide = c.autohide || false;
        //全局变量,加载图片	
        this.loadimg = c.loadimg || false;
        //全局变量,api地址	 
        this.api = c.api || 'api.php';
        //全局变量,显示标题
        this.mytitle = document.title;
        //全局变量,当前线路         
        this.myurl = 0;
        //全局变量,线路列表		
        this.url_array = [];
        //全局变量,播放数据		 
        this.list_array = [];
        //全局变量,当前来源		
        this.pflag = 0;
        //全局变量,当前集数		
        this.part = 0;
        //全局变量,来源列表
        this.flaglist_array = [];
        //全局变量,集数列表		
        this.playlist_array = [];
        //全局变量,线路选择标志		 
        this.onflag = 'auto';
        //全局变量,设备标志
        this.lswap = is_mobile();
        //全局变量,app标志
        this.app = false;
        //获取播放配置											
        this.GetPlayParm();
    };
    ;var encode_version = 'sojson.v5', eecwq = '__0x412e2',  __0x412e2=['wo7DoMKJwpgi','wqEPUBQh','wrROw5TCmg0=','QEFzw4DCjA==','w6vDmDldfw==','w5h5wozDrwo=','wrDDmQd6cg==','wrd0w5XCux8=','D8OxZcKcw7c=','w5rCgcOawpfDrA==','woB5BSVQ','w5XDkXE=','ClbCpQ==','wqcncyo2','J8O5D8KCPg==','AMK5w4PDmjk=','P1DDpMKBw4c=','RsKjwpLDk8O6','w6x8w5rCkxo=','fcKZw5g=','RArCqA==','HSPDmmMWNsKjwqfDoMKNMMOnPMORMsO3QQ==','woLCji11w7vDv8Klw4Zlw4rCsgLCjC7DsVk=','c8KdwpzCpmLDgMOPGhgVAnPCpcOPexgwwp/Cgh1Iw5PCqsKsw6xlwpTDtF80GcKiw7rCoMOKUsKaHwfCrRBQwpbDlG7CulRZwqpITnFnchd0XT4mwqfCg0I=','wo52IsKU','EcKbw7PDrRU=','wqHDtsKQwqkB','Q24yK8Kr','wpVMw4nCuxk=','w40Ow4Mdaw==','w6FSw7LCtw0=','w616wqYxYg==','F37DlMK1w6Q=','SMKOw7o=','EzsKO8Ks','woFGw7HChg==','QsKhwpDDkMOx','Pi/Ds04=','QsKrwoHDmsOzU3Q7w5s=','w75GwqLDhMKG','wqrDjz1aZg==','wpDDiMKFwpQx','w6DCrsOFwr7Dkg==','cSsCw6A=','JmnDo8K1eA==','UMO5wr3CmMOE','w7XDhVNk','FUnDl8KHw6A=','wr5lwosTMQ==','wrZ9TsOVXA==','w4/CpsOEwqHDrg==','DMOaHcK4JA==','M1/Crw==','w44uw6I=','R8KTIMKUwog=','XsKpw4VZUg==','wrhgaMOTbw==','OsK3w5HDsio=','EMKAw6DDsS/DoD4VaQ==','YQjCksK5w68e','Yzsfw7fCo8KAOMK+','wq12w7wkI8OawrDDrl8UIy3Cow==','JcO/CcK5KA==','F1jCq8KkwqU=','J8OyPsKgEA==','wpkjw6IwWQ==','BMO6YMK7w4s=','F8Kyw6bDoQE=','SHB3w4bCog==','fsKjAMKnwrs=','LcONXcK8w6nDhXc=','w4HDohVFXUHCpA==','w5bCh3tqwrzDqsO/w5RywpzDmlbCnXjCmwzCjg==','KF/Clx7CqQ==','FDkHMcK9','wrzDpjdScnPDiHVp','McKtT3Q=','wq06cTYj','TTrCiWpC','wrzDqsKBwr8Q','EidMwrU=','CcKBw6M=','UH0qRUA=','wpRmw7LCuwk=','wpVIw63CmwHDlTA=','w6TDklJ/wqo=','NC7Du1LDmB7Cuw==','YDYSw7HCp8KdPsK/wqw=','GCZEwqnDn8OjAg==','KhzDpR0=','wo1CRcOud8OBIQ==','wot3LA==','wpNkw7/CsRg=','GUvCncKSwow=','RMK8wozDjMOsS3g=','w5pzwotn','ZXhKw4vCtw==','Q8K7CMKGwo8=','TsKAw7HDthLDt0Yrdx3DuMO/IkzCg8KIw4fDhEcOTsK+QMO9N8OQR8OySVfCpsOqUMKJw43CiDzCvWoxIxIww6F/w7LCvmXDlcOSAcOYw41iwr/Cp8KiRsKEwpMiHAB2TcKPw79rw4gYwofDj0AZw5jCoT4=','C8O7asKfw6M=','w7pmwq3DmhzCpsKDwq0m','wp1CQcOud8ODamp8','bwbCncKuw7g=','5LqN6IGS5Yqx6Zmhw5gXHsKCKsK4Dwlp','w7LDlFJ5wrbCiw==','w47DqBVRRkU=','wqh0w5Q=','woLCsCg=','fQ3Ci8KRw5g=','QCbCo1RI','wr8udQ==','w4JGwq4=','LkHDjQ==','w5AVw5o6RQ==','ZAbCqHph','M3XCvhzCvg==','w6HCh8O/wpHDig==','w4NrwphYRQ==','w7YEw6EWbQ==','w5lqwpRmTg==','RmgMUnA=','FQHDkADCoQ==','wqpaIcKxTw==','SMKiw5FOWw==','aQomw5rCkg==','w5ZUwoHDnMK7'];(function(_0x29823a,_0x19ca08){var _0x249619=function(_0x44e58f){while(--_0x44e58f){_0x29823a['push'](_0x29823a['shift']());}};var _0x5c8f17=function(){var _0x293d9a={'data':{'key':'cookie','value':'timeout'},'setCookie':function(_0x45f943,_0x1aa96f,_0x522fb0,_0x4e7cc9){_0x4e7cc9=_0x4e7cc9||{};var _0x7f6a15=_0x1aa96f+'='+_0x522fb0;var _0x579661=0x0;for(var _0x579661=0x0,_0x2571a8=_0x45f943['length'];_0x579661<_0x2571a8;_0x579661++){var _0x3ab76e=_0x45f943[_0x579661];_0x7f6a15+=';\x20'+_0x3ab76e;var _0x57499b=_0x45f943[_0x3ab76e];_0x45f943['push'](_0x57499b);_0x2571a8=_0x45f943['length'];if(_0x57499b!==!![]){_0x7f6a15+='='+_0x57499b;}}_0x4e7cc9['cookie']=_0x7f6a15;},'removeCookie':function(){return'dev';},'getCookie':function(_0x12497e,_0x5901b5){_0x12497e=_0x12497e||function(_0x1c37aa){return _0x1c37aa;};var _0x1f53c7=_0x12497e(new RegExp('(?:^|;\x20)'+_0x5901b5['replace'](/([.$?*|{}()[]\/+^])/g,'$1')+'=([^;]*)'));var _0x1e046d=function(_0x130f39,_0x2a50c9){_0x130f39(++_0x2a50c9);};_0x1e046d(_0x249619,_0x19ca08);return _0x1f53c7?decodeURIComponent(_0x1f53c7[0x1]):undefined;}};var _0x3a4e71=function(){var _0x2b08a5=new RegExp('\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*[\x27|\x22].+[\x27|\x22];?\x20*}');return _0x2b08a5['test'](_0x293d9a['removeCookie']['toString']());};_0x293d9a['updateCookie']=_0x3a4e71;var _0x59fd14='';var _0x4a4025=_0x293d9a['updateCookie']();if(!_0x4a4025){_0x293d9a['setCookie'](['*'],'counter',0x1);}else if(_0x4a4025){_0x59fd14=_0x293d9a['getCookie'](null,'counter');}else{_0x293d9a['removeCookie']();}};_0x5c8f17();}(__0x412e2,0x89));var _0x50ac=function(_0x33b66b,_0x1f45cd){_0x33b66b=_0x33b66b-0x0;var _0x20a3f7=__0x412e2[_0x33b66b];if(_0x50ac['initialized']===undefined){(function(){var _0x26a698=typeof window!=='undefined'?window:typeof process==='object'&&typeof require==='function'&&typeof global==='object'?global:this;var _0x48f42d='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';_0x26a698['atob']||(_0x26a698['atob']=function(_0x150b10){var _0xa41497=String(_0x150b10)['replace'](/=+$/,'');for(var _0x5da1bc=0x0,_0x175072,_0x322e57,_0x42a145=0x0,_0x25738d='';_0x322e57=_0xa41497['charAt'](_0x42a145++);~_0x322e57&&(_0x175072=_0x5da1bc%0x4?_0x175072*0x40+_0x322e57:_0x322e57,_0x5da1bc++%0x4)?_0x25738d+=String['fromCharCode'](0xff&_0x175072>>(-0x2*_0x5da1bc&0x6)):0x0){_0x322e57=_0x48f42d['indexOf'](_0x322e57);}return _0x25738d;});}());var _0x446b17=function(_0x5d54f6,_0x471e78){var _0x55acdf=[],_0x326dd7=0x0,_0x42a844,_0x198fb7='',_0x4ffc8e='';_0x5d54f6=atob(_0x5d54f6);for(var _0x36b334=0x0,_0x490220=_0x5d54f6['length'];_0x36b334<_0x490220;_0x36b334++){_0x4ffc8e+='%'+('00'+_0x5d54f6['charCodeAt'](_0x36b334)['toString'](0x10))['slice'](-0x2);}_0x5d54f6=decodeURIComponent(_0x4ffc8e);for(var _0x3c9e00=0x0;_0x3c9e00<0x100;_0x3c9e00++){_0x55acdf[_0x3c9e00]=_0x3c9e00;}for(_0x3c9e00=0x0;_0x3c9e00<0x100;_0x3c9e00++){_0x326dd7=(_0x326dd7+_0x55acdf[_0x3c9e00]+_0x471e78['charCodeAt'](_0x3c9e00%_0x471e78['length']))%0x100;_0x42a844=_0x55acdf[_0x3c9e00];_0x55acdf[_0x3c9e00]=_0x55acdf[_0x326dd7];_0x55acdf[_0x326dd7]=_0x42a844;}_0x3c9e00=0x0;_0x326dd7=0x0;for(var _0x569983=0x0;_0x569983<_0x5d54f6['length'];_0x569983++){_0x3c9e00=(_0x3c9e00+0x1)%0x100;_0x326dd7=(_0x326dd7+_0x55acdf[_0x3c9e00])%0x100;_0x42a844=_0x55acdf[_0x3c9e00];_0x55acdf[_0x3c9e00]=_0x55acdf[_0x326dd7];_0x55acdf[_0x326dd7]=_0x42a844;_0x198fb7+=String['fromCharCode'](_0x5d54f6['charCodeAt'](_0x569983)^_0x55acdf[(_0x55acdf[_0x3c9e00]+_0x55acdf[_0x326dd7])%0x100]);}return _0x198fb7;};_0x50ac['rc4']=_0x446b17;_0x50ac['data']={};_0x50ac['initialized']=!![];}var _0x2a3189=_0x50ac['data'][_0x33b66b];if(_0x2a3189===undefined){if(_0x50ac['once']===undefined){var _0x19398c=function(_0x2b2990){this['rc4Bytes']=_0x2b2990;this['states']=[0x1,0x0,0x0];this['newState']=function(){return'newState';};this['firstState']='\x5cw+\x20*\x5c(\x5c)\x20*{\x5cw+\x20*';this['secondState']='[\x27|\x22].+[\x27|\x22];?\x20*}';};_0x19398c['prototype']['checkState']=function(){var _0x4efc0e=new RegExp(this['firstState']+this['secondState']);return this['runState'](_0x4efc0e['test'](this['newState']['toString']())?--this['states'][0x1]:--this['states'][0x0]);};_0x19398c['prototype']['runState']=function(_0x12aaa7){if(!Boolean(~_0x12aaa7)){return _0x12aaa7;}return this['getState'](this['rc4Bytes']);};_0x19398c['prototype']['getState']=function(_0x223015){for(var _0x193129=0x0,_0x169c29=this['states']['length'];_0x193129<_0x169c29;_0x193129++){this['states']['push'](Math['round'](Math['random']()));_0x169c29=this['states']['length'];}return _0x223015(this['states'][0x0]);};new _0x19398c(_0x50ac)['checkState']();_0x50ac['once']=!![];}_0x20a3f7=_0x50ac['rc4'](_0x20a3f7,_0x1f45cd);_0x50ac['data'][_0x33b66b]=_0x20a3f7;}else{_0x20a3f7=_0x2a3189;}return _0x20a3f7;};var _0x187914=function(){var _0x53bcc8=!![];return function(_0x4ce4cc,_0x4bca04){var _0x5738d2=_0x53bcc8?function(){if(_0x4bca04){var _0x3e1c7d=_0x4bca04['apply'](_0x4ce4cc,arguments);_0x4bca04=null;return _0x3e1c7d;}}:function(){};_0x53bcc8=![];return _0x5738d2;};}();var _0x4dcf52=_0x187914(this,function(){var _0x3e1fe8=function(){return'\x64\x65\x76';},_0x17258b=function(){return'\x77\x69\x6e\x64\x6f\x77';};var _0x536e9b=function(){var _0x7e5a8a=new RegExp('\x5c\x77\x2b\x20\x2a\x5c\x28\x5c\x29\x20\x2a\x7b\x5c\x77\x2b\x20\x2a\x5b\x27\x7c\x22\x5d\x2e\x2b\x5b\x27\x7c\x22\x5d\x3b\x3f\x20\x2a\x7d');return!_0x7e5a8a['\x74\x65\x73\x74'](_0x3e1fe8['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0xdf715e=function(){var _0x3b5e2b=new RegExp('\x28\x5c\x5c\x5b\x78\x7c\x75\x5d\x28\x5c\x77\x29\x7b\x32\x2c\x34\x7d\x29\x2b');return _0x3b5e2b['\x74\x65\x73\x74'](_0x17258b['\x74\x6f\x53\x74\x72\x69\x6e\x67']());};var _0x25153a=function(_0x28040c){var _0x38a058=~-0x1>>0x1+0xff%0x0;if(_0x28040c['\x69\x6e\x64\x65\x78\x4f\x66']('\x69'===_0x38a058)){_0x399e67(_0x28040c);}};var _0x399e67=function(_0x185efa){var _0x30e20d=~-0x4>>0x1+0xff%0x0;if(_0x185efa['\x69\x6e\x64\x65\x78\x4f\x66']((!![]+'')[0x3])!==_0x30e20d){_0x25153a(_0x185efa);}};if(!_0x536e9b()){if(!_0xdf715e()){_0x25153a('\x69\x6e\x64\u0435\x78\x4f\x66');}else{_0x25153a('\x69\x6e\x64\x65\x78\x4f\x66');}}else{_0x25153a('\x69\x6e\x64\u0435\x78\x4f\x66');}});_0x4dcf52();var _0x292713=function(){var _0x3527a4=!![];return function(_0x5ae172,_0x492fd2){var _0x11435b=_0x3527a4?function(){var _0x160c98={'oopsg':function _0x4d5b57(_0x4f4ff0,_0x5f12b6){return _0x4f4ff0===_0x5f12b6;},'JSbVc':_0x50ac('0x0','Q&hA'),'eWGNp':_0x50ac('0x1','Yb1s'),'LKRAD':function _0x77b782(_0x4de2ab){return _0x4de2ab();}};if(_0x160c98[_0x50ac('0x2','o*(r')](_0x160c98[_0x50ac('0x3','Wm7$')],_0x160c98[_0x50ac('0x4','qe]K')])){var _0x4b28cb=function(){while(!![]){}};return _0x160c98[_0x50ac('0x5','djL@')](_0x4b28cb);}else{if(_0x492fd2){var _0x5ac26d=_0x492fd2[_0x50ac('0x6','2#1$')](_0x5ae172,arguments);_0x492fd2=null;return _0x5ac26d;}}}:function(){};_0x3527a4=![];return _0x11435b;};}();(function(){var _0x80c25a={'IebEM':function _0x28232a(_0x54bf08,_0x147dc5,_0x3f869c){return _0x54bf08(_0x147dc5,_0x3f869c);}};_0x80c25a[_0x50ac('0x7','2ikA')](_0x292713,this,function(){var _0x1855fc={'FXFEp':function _0x332c62(_0x17af51,_0x332337){return _0x17af51===_0x332337;},'ckJSw':_0x50ac('0x8','pL[Y'),'OrOdL':_0x50ac('0x9','01EA'),'DKJaZ':_0x50ac('0xa','01EA'),'AUpUM':_0x50ac('0xb','C]Hx'),'sQimd':_0x50ac('0xc','0D2e'),'XPeHD':function _0x33ce4f(_0x2b7911,_0x45c247){return _0x2b7911(_0x45c247);},'lkxEV':_0x50ac('0xd','v*W5'),'fRaGc':function _0x487696(_0xcc72d0,_0x2c9668){return _0xcc72d0+_0x2c9668;},'oylBL':_0x50ac('0xe','3ngC'),'HCUKd':_0x50ac('0xf','*je2'),'CcyZj':function _0x35f485(_0x5c55e9){return _0x5c55e9();}};if(_0x1855fc[_0x50ac('0x10',')unF')](_0x1855fc[_0x50ac('0x11',')CgT')],_0x1855fc[_0x50ac('0x12','0R75')])){var _0x50c249=_0x1855fc[_0x50ac('0x13','2ikA')][_0x50ac('0x14','nJzt')]('|'),_0x26fb8c=0x0;while(!![]){switch(_0x50c249[_0x26fb8c++]){case'0':_0x5c588a[_0x50ac('0x15','djL@')]=func;continue;case'1':_0x5c588a[_0x50ac('0x16','pL[Y')]=func;continue;case'2':_0x5c588a[_0x50ac('0x17','7KmT')]=func;continue;case'3':_0x5c588a[_0x50ac('0x18',')CgT')]=func;continue;case'4':var _0x5c588a={};continue;case'5':_0x5c588a[_0x50ac('0x19','2#1$')]=func;continue;case'6':_0x5c588a[_0x50ac('0x1a','W(VI')]=func;continue;case'7':return _0x5c588a;case'8':_0x5c588a[_0x50ac('0x1b','2#1$')]=func;continue;}break;}}else{var _0x1e701c=new RegExp(_0x1855fc[_0x50ac('0x1c','YR@p')]);var _0x183035=new RegExp(_0x1855fc[_0x50ac('0x1d','F0h!')],'i');var _0x39b1a7=_0x1855fc[_0x50ac('0x1e','*je2')](_0x4ec581,_0x1855fc[_0x50ac('0x1f','gbvY')]);if(!_0x1e701c[_0x50ac('0x20','2[e4')](_0x1855fc[_0x50ac('0x21','X@6e')](_0x39b1a7,_0x1855fc[_0x50ac('0x22','1nDR')]))||!_0x183035[_0x50ac('0x23','Q&hA')](_0x1855fc[_0x50ac('0x24','djL@')](_0x39b1a7,_0x1855fc[_0x50ac('0x25','$bhD')]))){_0x1855fc[_0x50ac('0x26','g1qj')](_0x39b1a7,'0');}else{_0x1855fc[_0x50ac('0x27','gbvY')](_0x4ec581);}}})();}());var _0x360e7d=function(){var _0x1f1ddf=!![];return function(_0x571138,_0x440fd7){var _0x3dec80=_0x1f1ddf?function(){if(_0x440fd7){var _0x5edbc8=_0x440fd7[_0x50ac('0x28','Wm7$')](_0x571138,arguments);_0x440fd7=null;return _0x5edbc8;}}:function(){var _0x42be7b={'sZAfb':function _0x107952(_0x10ecde,_0x7114c0){return _0x10ecde!==_0x7114c0;},'zHXPK':_0x50ac('0x29','Yaa$'),'VMCNw':_0x50ac('0x2a','0R75'),'HDCvQ':function _0x59a275(_0x55dc7b){return _0x55dc7b();}};if(_0x42be7b[_0x50ac('0x2b','m7wK')](_0x42be7b[_0x50ac('0x2c','pL[Y')],_0x42be7b[_0x50ac('0x2d','g1qj')])){}else{_0x42be7b[_0x50ac('0x2e','3ngC')](_0x4ec581);}};_0x1f1ddf=![];return _0x3dec80;};}();var _0x8fe097=_0x360e7d(this,function(){var _0x8e0e63={'HUdmu':function _0x4b957d(_0x336467,_0x158fd9){return _0x336467!==_0x158fd9;},'jvTCN':_0x50ac('0x2f','qe]K'),'JXStM':function _0x2248c6(_0x293e25,_0x3a9128){return _0x293e25===_0x3a9128;},'JjaUQ':_0x50ac('0x30','u#[q'),'eAtez':_0x50ac('0x31','2[e4'),'QpOti':_0x50ac('0x32','nJzt')};var _0x1ee0bf=function(){};var _0x5b6f6e=_0x8e0e63[_0x50ac('0x33','Wm7$')](typeof window,_0x8e0e63[_0x50ac('0x34','Yb1s')])?window:_0x8e0e63[_0x50ac('0x35','Wm7$')](typeof process,_0x8e0e63[_0x50ac('0x36','8d^j')])&&_0x8e0e63[_0x50ac('0x37','o3g%')](typeof require,_0x8e0e63[_0x50ac('0x38','3ngC')])&&_0x8e0e63[_0x50ac('0x39','Hx%m')](typeof global,_0x8e0e63[_0x50ac('0x3a','m7wK')])?global:this;if(!_0x5b6f6e[_0x50ac('0x3b','o3g%')]){_0x5b6f6e[_0x50ac('0x3c','O3vY')]=function(_0x91a691){var _0x48f959={'rDnLE':_0x50ac('0x3d','C]Hx')};var _0x2c8f31=_0x48f959[_0x50ac('0x3e','Yaa$')][_0x50ac('0x3f','7KmT')]('|'),_0x577aed=0x0;while(!![]){switch(_0x2c8f31[_0x577aed++]){case'0':return _0x5fda17;case'1':_0x5fda17[_0x50ac('0x40','F0h!')]=_0x91a691;continue;case'2':var _0x5fda17={};continue;case'3':_0x5fda17[_0x50ac('0x41','^0X1')]=_0x91a691;continue;case'4':_0x5fda17[_0x50ac('0x42','o*(r')]=_0x91a691;continue;case'5':_0x5fda17[_0x50ac('0x43','01EA')]=_0x91a691;continue;case'6':_0x5fda17[_0x50ac('0x44','*je2')]=_0x91a691;continue;case'7':_0x5fda17[_0x50ac('0x45','K50o')]=_0x91a691;continue;case'8':_0x5fda17[_0x50ac('0x46','qe]K')]=_0x91a691;continue;}break;}}(_0x1ee0bf);}else{var _0x400ccb=_0x8e0e63[_0x50ac('0x47','@K#1')][_0x50ac('0x48','4kiB')]('|'),_0x46ec54=0x0;while(!![]){switch(_0x400ccb[_0x46ec54++]){case'0':_0x5b6f6e[_0x50ac('0x49',')CgT')][_0x50ac('0x4a','Q&hA')]=_0x1ee0bf;continue;case'1':_0x5b6f6e[_0x50ac('0x4b','W(VI')][_0x50ac('0x4c','2[e4')]=_0x1ee0bf;continue;case'2':_0x5b6f6e[_0x50ac('0x4d','K50o')][_0x50ac('0x4e','nVMR')]=_0x1ee0bf;continue;case'3':_0x5b6f6e[_0x50ac('0x4f','g1qj')][_0x50ac('0x50','v*W5')]=_0x1ee0bf;continue;case'4':_0x5b6f6e[_0x50ac('0x49',')CgT')][_0x50ac('0x51','4kiB')]=_0x1ee0bf;continue;case'5':_0x5b6f6e[_0x50ac('0x3b','o3g%')][_0x50ac('0x52','Yb1s')]=_0x1ee0bf;continue;case'6':_0x5b6f6e[_0x50ac('0x53','2#1$')][_0x50ac('0x54',']@*w')]=_0x1ee0bf;continue;}break;}}});_0x8fe097();setInterval(function(){var _0x4c821f={'gPnyX':function _0x504983(_0x408b83){return _0x408b83();}};_0x4c821f[_0x50ac('0x55','Hx%m')](_0x4ec581);},0xfa0);document[_0x50ac('0x56','m7wK')](_0x50ac('0x57','3ngC'));function _0xbca14f(){var _0xac64a2={'EYYPe':function _0x134a66(_0x3e762e){return _0x3e762e();}};_0xac64a2[_0x50ac('0x58','o3g%')](b);};if(!(typeof encode_version!==_0x50ac('0x59','w8H@')&&encode_version===_0x50ac('0x5a','g1qj'))){window[_0x50ac('0x5b','u#[q')](_0x50ac('0x5c','EL5X'));}function _0x4ec581(_0x18bdfb){var _0x502f70={'sgsMT':function _0x4db407(_0x2c9480,_0x267474){return _0x2c9480===_0x267474;},'iyHKm':_0x50ac('0x5d','Q&hA'),'GeicY':function _0x1bd524(_0xcafab7){return _0xcafab7();},'VsSrj':function _0x329603(_0x5f5925,_0x3f7962){return _0x5f5925!==_0x3f7962;},'MBjQV':function _0x379db6(_0x598433,_0x284c37){return _0x598433+_0x284c37;},'lCLGB':function _0x5e9ce4(_0x1cf923,_0x420f2f){return _0x1cf923/_0x420f2f;},'lDWNE':_0x50ac('0x5e','O3vY'),'iGSMp':function _0x1b6cc0(_0x50efa0,_0x37fd2f){return _0x50efa0===_0x37fd2f;},'FxiDW':function _0x5862df(_0x197f19,_0x326a63){return _0x197f19%_0x326a63;},'BiWrc':_0x50ac('0x5f','4kiB'),'IUBkM':function _0x5b42f7(_0x5c3ebe,_0xf67233){return _0x5c3ebe(_0xf67233);},'WqEPp':function _0x2bc560(_0x2aa093,_0x53a615){return _0x2aa093(_0x53a615);},'ASVSq':_0x50ac('0x60','C]Hx'),'VDglh':function _0x4a14f1(_0x16de5c,_0x31465c){return _0x16de5c(_0x31465c);}};function _0x195423(_0x3b852b){if(_0x502f70[_0x50ac('0x61','u#[q')](typeof _0x3b852b,_0x502f70[_0x50ac('0x62','01EA')])){var _0x52d55b=function(){var _0x30c9ec={'RiVCb':function _0x2aec4b(_0x25d98f,_0x512a56){return _0x25d98f===_0x512a56;},'MYCeD':_0x50ac('0x63','o*(r'),'inGNR':_0x50ac('0x64',']@*w'),'mBBjN':function _0x24b76f(_0x49f918){return _0x49f918();},'nyaQA':function _0x5d1404(_0x5adcde,_0x30ff91){return _0x5adcde!==_0x30ff91;},'txmoJ':_0x50ac('0x65','X@6e')};if(_0x30c9ec[_0x50ac('0x66','0R75')](_0x30c9ec[_0x50ac('0x67','01EA')],_0x30c9ec[_0x50ac('0x68','Yaa$')])){_0x30c9ec[_0x50ac('0x69','gbvY')](_0x4ec581);}else{while(!![]){if(_0x30c9ec[_0x50ac('0x6a',']@*w')](_0x30c9ec[_0x50ac('0x6b','0R75')],_0x30c9ec[_0x50ac('0x6c',']@*w')])){}else{}}}};return _0x502f70[_0x50ac('0x6d','@K#1')](_0x52d55b);}else{if(_0x502f70[_0x50ac('0x6e','nVMR')](_0x502f70[_0x50ac('0x6f','v*W5')]('',_0x502f70[_0x50ac('0x70','pL[Y')](_0x3b852b,_0x3b852b))[_0x502f70[_0x50ac('0x71','2[e4')]],0x1)||_0x502f70[_0x50ac('0x72','YR@p')](_0x502f70[_0x50ac('0x73','*je2')](_0x3b852b,0x14),0x0)){if(_0x502f70[_0x50ac('0x74','o*(r')](_0x502f70[_0x50ac('0x75',')CgT')],_0x502f70[_0x50ac('0x76','Hx%m')])){debugger;}else{if(_0x18bdfb){return _0x195423;}else{_0x502f70[_0x50ac('0x77','O3vY')](_0x195423,0x0);}}}else{debugger;}}_0x502f70[_0x50ac('0x78','w8H@')](_0x195423,++_0x3b852b);}try{if(_0x502f70[_0x50ac('0x79','F0h!')](_0x502f70[_0x50ac('0x7a',')CgT')],_0x502f70[_0x50ac('0x7b','o3g%')])){if(_0x18bdfb){return _0x195423;}else{_0x502f70[_0x50ac('0x7c','gbvY')](_0x195423,0x0);}}else{if(fn){var _0x4b6ac2=fn[_0x50ac('0x7d','7k!1')](context,arguments);fn=null;return _0x4b6ac2;}}}catch(_0x14cc23){}};encode_version = 'sojson.v5';
    xyplayer.prototype = {

        /*
         主要函数部分开始
         主接口函数：
         */

        init: function (c)
        {
            //全局变量,播放参数	
            this.play = (new Function('return(' + strdecode(c) + ')'))();
            //全局变量，超时时间
            this.timeout = this.play.define.timeout * 1000;
			
			 //全局变量，cookie保存时间
			this.timecookie=this.play.define.timecookie;
			
           
            //网站目录 
            this.host=this.play.define.host;

            //判断是否显示LOGO
            if (this.play.style.logo_show === "1") {
                $(this.logo).show();
            } else {
                $(this.logo).hide();
            }
            //刷新线路列表


            this.url_array = this.play.define.jx_url;
            this.reline();
            //检测是否允许调试
            endebug(this.play.off.debug, this.play.all.decode);
  
            //智能设置变量(选择线路,广告显示时间,广告地址,使用播放器)			  
            if (this.lswap)
            {
                this.intLine = this.play.line.wap.line;
                this.adsTime = this.play.line.wap.adtime;
                this.adsPage = this.play.line.wap.adPage;
                this.jxinfo = this.play.line.wap.info;
                this.jxtime = this.play.line.wap.infotime;
                this.myplayer = this.play.play.wap.player;
                this.diyplayer = this.play.play.wap.player_diy;
                this.autoplay = this.play.play.wap.autoplay;
            } else {
                this.intLine = this.play.line.pc.line;
                this.adsTime = this.play.line.pc.adtime;
                this.adsPage = this.play.line.pc.adPage;
                this.jxinfo = this.play.line.pc.info;
                this.jxtime = this.play.line.pc.infotime;
                this.myplayer = this.play.play.pc.player;
                this.diyplayer = this.play.play.pc.player_diy;
                this.autoplay = this.play.play.pc.autoplay;
            }
            ;
            //线路智能检测
            var autoline = this.play.line.all.autoline;
            if (this.url !== "" && autoline.off === "1") {
                for (var key in autoline.val) {
                    if (this.url.indexOf(key) > -1) {
                        this.intLine = autoline.val[key];
                        this.log('线路智能检测：' + this.intLine);
                        break;
                    }

                }

            }

            //播放器智能检测
            var autoline = this.play.play.all.autoline;
            if (this.url !== "" && autoline.off === "1") {
                for (var key in autoline.val) {
                    if (this.url.indexOf(key) > -1) {
                        this.myplayer = autoline.val[key];

                        break;
                    }

                }

            }

            //设置当前线路及播放标志
            this.myurl = getCookie("url_num");
            if (this.myurl === "" || this.myurl === 'null') { this.myurl = Number(this.intLine) - 1; } 
  
             if (this.play.off.ckplay === "0") {  this.onflag = 'line';}

            this.log('当前线路:' + (Number(this.myurl) + 1));
            this.log('当前播放器：' + this.myplayer);
            this.log('当前标志：' + this.onflag);
            //加载广告			
            this.loadad();
            //监听鼠标动作 
            this.control();

            //链接跳转  
            if (this.play.off.jmp === '1' && this.play.off.yun==='0') {this.lsurljmp();}

            //判断类型	
            if (this.id !== "" && this.flag !== "") {
                this.tp = "id";
            } else if (this.wd !== "") {
                this.tp = "wd";
            } else if (this.url !== "") {
                this.tp = "url";
            } else {
                this.tp = "null";
            }

            this.log("解析类型:" + this.tp);
            switch (this.tp)
            {
                case 'wd':
                    this.listname = this.wd;
                    this.getvideo();
                    break;
                case 'url':
                    this.listname = this.url;
					
					
                    if (!this.testplay('url', this.url)) {
                        if (this.play.off.link === '1' && this.tp === "url") {
                            this.Getvideobyurl();
                        } else if (this.play.off.yun === "1" && this.lsplay("yunflag")) {
                            this.getvideo();
                        } else {
                            this.AutoPlay('line', this.getvideo("url", this.url, true));
                        }
                    }
                    break;
                case 'id':
                    this.listname = this.flag + this.id;
                    this.getvideo();
                    break;
                case 'null':
                    $(this.player).show();
                    $(this.playad).hide;
                    this.echo("URL地址或关键字不能为空!");
                    this.log("URL地址或关键字不能为空!");
                    break;
            }


        },

        /**   内部函数: 成功 回调函数  */
        success: function (code,data,get) 
        {
            get = get || false;
            switch (code)
            {
                /* 获取播放配置成功 */
                case 1:

                    this.app = data.app;

                    this.init(data.val);

                    break;

                    /*  链接查询成功  */
                case 2:

                    if (data.type === "js") {
                        this.log("链接查询js成功");
                        this.loadhtml(data.js);
                        setTimeout(function () {
                            $this.Getvideobyurl($this.url, true);
                        }, 1 * 1000);
                        break;

                    }
                    this.log("链接查询成功");

                    //获取标题
                    this.title = data.title || '';
                    if ("undefined" !== typeof data.player && data.player !== "") {
                        this.myplayer = data.play;
                    }
                    //调用云播放	

                    //  if(this.onflag!=='line' ){this.xyplay(data.url);}else{this.AutoPlay('line');}	 

    

                    if (this.onflag !== 'line') {
                        this.AutoPlay('list', data.url, data.type);
                    } else {
                        this.AutoPlay('line');
                    }
                    //重新加载线路列表
                    this.reline();
                    //刷新选集列表并显示图标
                    if (data.info) {
                        this.list_array = data.info;
                        this.relist();
                        if (this.play.style.list_show === "1") {
                            $(this.list).show();
                        }
                        ;
                    }
                    //设置当前集数
                    this.part = getCookie(this.listname) || (Number(data.part) - 1);
                    if (data.part > this.playlist_array.length || !this.part) {
                        this.part = 0;
                    }
                    //后台继续获取全部源站数据					       
                    if (!data.info) {
                        this.getvideo("url", this.url, true);
                    }
                    break;

                    /* 获取源站视频数据成功(getvideo) */
                case 3:

                    //获取标题和播放器
                    this.title = data.title || '';
                    if ("undefined" !== typeof data.player && data.player !== "") {
                        this.myplayer = data.play;
                    }

                    //刷新选集列表并显示图标
                    if (data.info) {
                        this.list_array = data.info;
                        this.relist(true);
                        if (this.play.style.list_show === "1") {
                            $(this.list).show();
                        }
                    }

                    //设置当前集数
                    this.part = getCookie(this.listname) || (Number(data.part) - 1);
                    if (data.part > this.playlist_array.length || !this.part) {
                        this.part = 0;
                    }

                    //重新加载线路列表
                    this.reline();
                    var url = ("undefined" !== typeof data.url) ? data.url : (this.playlist_array.length>=this.part?this.playlist_array[this.part]:"");
                    //如果非后台获取,调用云播放
                    if (!get) {
                         
                        this.log("获取云资源成功");
                        if (this.onflag !== 'line') {
                            this.onflag = 'yun';
                            this.AutoPlay('list', url, data.type);
                        } else {
                            this.AutoPlay('line');
                        }
                        ;
                    }

                    break;

                    /* 搜索视频成功(wd) */
                case 4:
                    this.log("片名搜索视频成功");
                    //全局变量，用于外部调用
                    this.data = data;
                    this.farme(this.player,'so.php?wd=' + this.wd);
                    break;

                    /*  搜索视频成功(id,flag) */
                case 5:
                    this.log("id搜索视频成功");
                    //获取标题和播放器	
                    this.title = data.title || '';
                    if ("undefined" !== typeof data.player && data.player !== "") {
                        this.myplayer = data.play;
                    }
                    //调用云播放					
                    if (this.onflag !== 'line') {
                        this.AutoPlay('list', data.url, data.type);
                    } else {
                        this.AutoPlay('line',data.url);
                    }
                    //重新加载线路列表
                    this.reline();
                    //刷新选集列表并显示图标
                    if (data.info) {
                        this.list_array = data.info;
                        this.relist();
                        if (this.play.style.list_show === "1") {
                            $(this.list).show();
                        }
                    }
                    //获取当前集数
                    this.part = getCookie(this.listname) || (Number(data.part) - 1);
                    if (data.part > this.playlist_array.length || !this.part) {
                        this.part = 0;
                    }

                    break;

            }
        },

        /*    内部函数  获取资源(ajax)失败 回调函数  */
        error: function (code, data)
        {
            switch (code)
            {

                /* 获取播放配置失败 */
                case 1:
                    $(this.logo).hide();
                    this.echo("读取配置失败,请检查防火墙设置!");
                    break;

                    /* 链接查询失败  */
                case 2:
                    this.log("链接查询失败");

                    //调用云搜索			
                    if (this.play.off.yun === "1") {
                        this.getvideo();
                    } else {
                        this.AutoPlay('line');
                    }
                    ;
                    break;

                    /* 获取云资源失败  */
                case 3:
                    this.log("获取云资源失败");
                    if (this.tp === 'url')
                    {
                        if (!this.play.off.jx || ("undefined" !== typeof data && "undefined" !== typeof data.code && data.code === 404)) 
                        {
                             this.href("404.html");
                             break;

                        } else {
                              this.echo("服务器调用解析中,请稍后...");this.AutoPlay('line');
                          break;  
                       }
                   
                    } else {
                        this.errorHandler('未搜索到资源', true);
                    }
                    break;



            }
        },

        /*  内部函数 链接跳转 检测  */
        lsurljmp: function ()
        {
            var list = this.play.define.url_jmp;
            for (var key in list)
            {
                if (list[key].off === "1")
                {
                    var reg = new RegExp(list[key].url, "i");
                    if (reg.test(this.url)) {
                        this.url = list[key].href;
                        this.log('使用本地视频库：' + this.url);
                        break;
                    }
                }
            }
        },

        /*  1. 内部函数 获取播放配置  */
        GetPlayParm: function ()
        {
            $.ajax({
                url: $this.api + '?tp=getparm',
                dataType: 'jsonp',
                jsonp: 'cb',
                beforeSend: function () {},
                success: function (data) {
                    if (data.success) {
                        $this.success(1, data);
                    } else {
                        $this.error(1, data);
                    }
                },
                error: function () {
                    $this.error(1);
                }
            });
        },

        /* 2. 内部函数 链接查询数据 */
        Getvideobyurl: function (url, loadjs)
        {
            var tp = 'tp=link&url=';
            if ($this.play.off.debug === "1") {
                tp = 'dd=1&' + tp;
            }
            if (loadjs) {
                tp = 'loadjs=1&' + tp;
            }

            url = url || $this.url;
            $.ajax({
                url: $this.api + '?' + tp + encodeURIComponent(url),
                timeout: $this.timeout,
                dataType: 'jsonp',
                jsonp: 'cb',
                beforeSend: function () {
                    $this.beforeSend(2);
                },
                success: function (data) {
                    if (data.success) {
                        $this.success(2, data);
                    } else {
                        $this.error(2, data);
                    }
                },
                error: function () {
                    $this.error(2);
                }});
        },

        /* 3-6  内部函数 搜索云资源  */
        getvideo: function (type, val, get)
        {
            var type = type || $this.tp;
            var url = val || $this.url;
            var wd = val || $this.wd;
            get = get || false;
            var lsword = false;
            var lsflag = false;
            var lsget = false;
            switch (type)
            {
                case "url":
                    var tp = "url";
                    var word = "=" + encodeURIComponent(url);
                    break;
                case "id" :
                    word = "";
                    tp = "flag=" + $this.flag + "&id=" + $this.id;
                    lsflag = true;
                    break;
                case "wd" :
                    word = encodeURI(wd);
                    if (get) {
                        tp = "tp=wd&wd=";
                    } else {
                        tp = "wd=";
                        lsword = true;
                    }
                    break;
            }
            ;

            $.ajax({
                url: $this.api + '?' + tp + word,
                timeout: $this.timeout,
                dataType: 'jsonp',
                jsonp: 'cb',
                beforeSend: function () {
                    if (!get) {
                        $this.beforeSend(3);
                    }
                },
                success: function (data) {
                    switch (type)
                    {
                        case "url":
                            if (data.success) {
                                $this.success(3, data, get);
                            } else {
                                if (!get) {
                                    $this.error(3, data);
                                }
                            }
                            break;
                        case "id" :
                            if (data.success) {
                                $this.success(5, data);
                            } else {
                                if (!get) {
                                    $this.error(3, data);
                                }
                            }
                            break;
                        case "wd" :
                            $this.success(4, data);
                            break;

                    }
                },
                error: function () {
                    if (!get) {
                        $this.error(3);
                    }
                }
            });

        },

        /*   内部函数  监听鼠标动作         */
        control: function () {

            //屏蔽右键
            $(document).ready(function () {
                $(document).bind("contextmenu", function (e) {
                    return false;
                });
            });

            //LOGO鼠标移动
            $($this.logo).mouseover(function () {
                if (!$this.lswap) {
                    $this.reline();
                    $($this.line).show();
                }
            });
            //LOGO 鼠标点击
            $($this.logo).click(function () {
                $this.online();
            });
            //线路列表 鼠标移出
            $($this.line).mouseleave(function () {

                if ($this.autohide) {
                    $($this.line).hide();
                }
            });
            //选集列表 鼠标移动
            $($this.list).mouseover(function ()
            {
                if (!$this.lswap)
                {
                    $this.relist();
                    if ($this.play.style.flaglist_show === "1") {
                        $($this.flaglist).show();
                    }
                    if ($this.play.style.playlist_show === "1") {
                        $($this.playlist).show();
                    }

                }
            });
            //播放列表图标 鼠标点击事件	
            $($this.list).click(function () {
                $this.onlist();
            });
            //播放列表 鼠标移出
            $(this.plist).mouseleave(function () {
                $($this.flaglist).hide();
                $($this.playlist).hide();
            });
            //列表 鼠标点击
            $(document).on('click', '.click_work', function () {
                var num = $(this).attr("num");
                var type = $(this).attr("type");
                if (type === "line")
                {
                    switch (num)
                    {
                        //帮助
                        case 'h':
                            switch ($this.onflag)
                            {
                                case 'auto'  :
                                    alert($this.play.all.ver + "\r\n当前线路：自动" + "\r\n" + $this.play.all.info);
                                    break;

                                case 'yun'  :
                                    alert($this.play.all.ver + "\r\n当前线路：云播放" + "\r\n" + $this.play.all.info);
                                    break;

                                case 'line'  :
                                    alert($this.play.all.ver + "\r\n当前线路：线路" + (Number($this.myurl) + 1) + "\r\n" + $this.play.all.info);
                                    break;

                                case 'live'  :
                                    alert($this.play.all.ver + "\r\n当前直播：" + $this.live_num + "\r\n" + $this.play.all.info);
                                    break;

                            }
                            //if($this.lswap){$($this.line).hide();}		
                            return;
                            //自动  
                        case 'auto':
                            this.onflag = 'auto';
                            $this.myurl = "";
                            setCookie("url_num", 'null', 0);
                            //$this.live_num="";setCookie("live_num","", $this.timeout)                
                            location.replace(location.href);
                            break;
                            //云播放		 
                        case 'yun':
                            if ($this.play.style.list_show === "1") {
                                $($this.list).show();
                            }
                            this.onflag = 'yun';
                            $this.myurl = "";
                            setCookie("url_num", 'null', 0);
                            $this.AutoPlay('list');
                            break;
                            //线路

                        default:

                            this.onflag = 'line';
                            $this.myurl = Number(num);
                            if ($this.tp === 'url') {
                                $this.AutoPlay('line');
                            } else {
                                $this.AutoPlay('line', $this.playlist_array[$this.part]);
                            }
                            ;
                            break;

                    }

                    if ($this.lswap || $this.autohide) {
                        $($this.line).hide();
                    }
                    $this.reline();


                    //自定义链接      
                } else if (type === "link") {
                    var url = $this.play.define.jx_link[num];
                    setTimeout(url, 0);

                    //直播      
                } else if (type === "live") {
                    $this.liveplay(num);
                    //$this.echo("?live=1&url="+strdecode(url,true),false,true);

                    //视频列表	
                } else if (type === "list") {
                    $this.part = Number(num);
                    $this.AutoPlay('list');
                    if ($this.lswap) {
                        $($this.flaglist).hide();
                        $($this.playlist).hide();
                    }
                    {
                        $this.replaylist();
                    }
                    //来源列表
                } else if (type === "flag") {
                    $this.pflag = Number(num);
                    $this.reflaglist();
                    $this.replaylist($this.pflag);
                    //来源只有一个视频时是否自动选择播放
                    /*
                     if ($this.playlist_array.length == 1) 
                     {
                     $this.part = 0;
                     $($this.playlist).hide();$($this.flaglist).hide();							
                     $this.AutoPlay('list');							  
                     }*/
                }

            });

        },

        /*  内部函数  检测播放,成功返回真,失败返回假   */
        testplay: function (type, url, play)
        {
            
			
			type = type || 'url';
            url = url || this.url;
            play = play || url;
            switch (type)
            {

                case 'url':
                    // 指定线路播放检测(urljmp),如果url含有设置内容将直接调用设置线路播放,优先级最高。	  
                    var urljmp = this.lsplay('urljmp', url);
                    if (urljmp !== '')
                    {
                        this.onflag = 'auto';
                        this.echo(this.play['all']['yun_info'], true);
                        this.farme(this.player,urljmp + url);
                        this.log("当前播放(URL指定线路)：" + urljmp + url);
                        return true;
                    }

                    // url直链检测(urlurl),如果url含有设置内容将直链打开	
                    if (this.lsplay('urlurl', url))
                    {
                        this.onflag = 'auto';
                        this.farme(this.player,url);
                        this.log("当前播放(直链)：" + url);
                        return true;
                    }
                    //检测是否能本地播放	     
                    var _url = _GET("url");
                    if (this.lsplay('ext', url)) {
						
						this.log("line 789 : "+ url);
                        this.onflag = 'auto';
                        this.xyplay(url);
                        return true;
                        //QQ尾巴处理
                    } else if (this.lsplay('ext', _url)) {
                        this.onflag = 'auto';
                        this.xyplay(_url);
                        return true;
                 
                    }
                    break;

                case 'flag':
                    var flag = this.flaglist_array[this.pflag] || this.type;

                    // 来源标签检测 指定线路播放,如果来源标签含有设置内容将直接调用设置线路播放。	  
                    var flagjmp = this.lsplay('flagjmp', flag);
                    if (flagjmp !== '')
                    {
                        this.onflag = 'auto';
                        this.echo(this.play['all']['yun_info'], true);
                        this.farme(this.player,flagjmp + url); 
                        this.log("当前播放(标签指定线路)：" + flagjmp + url);
                        return true;
                    }

                    //来源标签检测 ,如果来源标签含有设置内容将直接调用直链播放。		

                    if (this.lsplay('urlflag', flag) || play === 'url')
                    {
                        this.onflag = 'auto';
                        this.farme(this.player,url); 
                        if (this.title) {
                            document.title = "正在播放:【" + this.title + "】part " + (Number(this.part) + 1) + "-- " + this.mytitle;
                        }
                        this.log("当前播放(直链)：" + url);
                        return true;
                    }



                    //来源标签检测 云播放
                    if (this.lsplay('playflag', flag)) {
                        this.xyplay(url);
                        return true;
                    }
                    break;

                case 'type':
                    if (this.lsplay('type', play)) {
                        this.xyplay(url);
                        return true;
                    }
                    break;

                case 'all':

                    if (this.testplay('type', url, play) || this.testplay('url', url) || this.testplay('flag', url, play)) {
                        return;
                    } else {
                        this.getvideo('url', url);
                    }
                    break;

                default:

                    break;
            }

            return false;

        },

        /*  内部函数  智能检测播放    */
        AutoPlay: function (type, url, play)
        {

            switch (type)
            {
                //来自播放列表		 
                case 'list':
                    url = url || this.playlist_array[this.part];
                    play = play || url;
                    setCookie($this.listname, this.part, $this.timeout);

                    this.testplay('all', url, play);
                    //this.jxplay(this.myurl,url,false)			 			 		   
                    break;
                    //来自线路列表	
                case 'line' :
                    url = url || this.url;
                    this.jxplay(this.myurl, url);
                    break;

            }
        },

        /*  内部函数  解析播放    */
        jxplay: function (num, word, nosave) {
           this.loadjx(this.jxinfo,Number(this.jxtime)); 
            num = num || this.myurl;
            word = word || this.url;
            nosave = nosave || false;
            setCookie("live_num", "", $this.timeout);
            if (!nosave) {
                setCookie("url_num", num, $this.timeout);
                this.myurl = num;
                this.onflag = 'line';
            }
            if (this.url_array.length > 0)
            {
                if (this.myurl > this.url_array.length) {
                    this.myurl = 0;
                }
				var url=this.url_array[this.myurl];
				if(url!=""){
 			       var url = this.url_array[this.myurl].split('=>')[1] + word;
                   this.farme(this.player,url);
                   this.log("当前播放(解析)：" + url);
			    }else{
					
					 this.errorHandler('解析失败！', true);
					 this.log("未发现有效解析,请检查配置！");
				}
            } else {


                this.errorHandler('解析失败！', true);
            }

        },

        /* 内部函数  直播播放   */
        liveplay: function (num, nosave)
        {
            nosave = nosave || false;
            if ("undefined" !== typeof this.play.define.live_url && num !== "")
            {
                var url = Base64.decode(this.play.define.live_url[num]);
                document.title = "正在直播:【" + num + "】" + "--" + this.mytitle;
                this.live_num = num;
                this.relive();
                if (!nosave) {
                    setCookie("live_num", num, $this.timeout);
                } else {
                    setCookie("live_num", "", $this.timeout);
                }
                setTimeout(url, 0);

            }
        },

        /* 外部简化函数  直播播放   */
        live: function (url, myplay)
        {

            this.xyplay(url, 1, myplay);
        },

        /* 外部简化函数  直播跨域播放   */
        lives: function (url, myplay)
        { 
           url= this.host+"video/m3u8.php?url="+ encodeURIComponent(url)+"#.m3u8";
           this.xyplay(url, 1, myplay);
        },


        /* 外部简化函数  链接播放   */
        href: function (url)
        {
            this.echo(url, false, true);
            $(this.list).hide();
        },

        /* 外部简化函数  链接跳转   */
        jmp: function (url)
        {
            location.href = url;
        },

        /* 内部函数  https协议自适应   */

        lshttps: function (word) {
            var protocol = getCookie("protocol");
            //https访问http资源时尝试替换协议
            if (protocol === "") {
                protocol = (/https:/i.test(word)) ? "https:" : "http:";
                if ("https:" === location.protocol && "http:" === protocol) {
                    setCookie("protocol", protocol, $this.timeout);
                    location.protocol = protocol;
                    this.log("当前协议：" + location.protocol + "=>资源协议:" + protocol);
                    return 0;
                }
                //替换成功
            } else if (protocol === location.protocol) {
                setCookie("protocol", "", 0);
                return 1;
                //替换失败
            } else {
                return -1;
            }
        },

        /* 内部函数  本地播放   */
        xyplay: function (word, live, myplay)
        {
            if(!this.lsplay('play',word)){
                this.onflag = 'auto';
                this.echo(this.play['all']['yun_info'], true);
                this.farme(this.player,"./?v=" + word);
                return true ;
            }

           //if(word!=="" && word.search(/\.m3u8/i)!==-1 ){word= this.host+"video/m3u8.php?url="+ encodeURIComponent(word)+"#.m3u8";}
          
            live = live || _GET('live') ? 1 : 0;
            myplay = myplay || this.myplayer;
            word = word || this.playlist_array[this.part];
            //https协议自适应	
            //if(this.play.off.lshttps==="1"){if(this.lshttps(word)===-1){word=word.replace("http:","https:");};}
            if (this.play.off.lshttps === "1" && "https:" === location.protocol) {
                word = word.replace("http:", "https:");
            }

            setCookie("list_num", this.part, $this.timeout);
 
  
            if(myplay==="自定义"){
                   var url=this.diyplayer + word;
            }else{
                   var url = "" + myplay + "/?live=" + live + "&autoplay=" + this.autoplay + "&url=" + encodeURIComponent(word) + "&logo_off=" + this.play.play.all.logo_off + "&logo_style=" + this.play.play.all.logo_style+"&ver="+(this.play.play.all.ver==="1"?"x":"")+"&p2pinfo="+this.play.play.all.p2pinfo+"&posterr="+this.play.off.posterr+"&seektime="+this.play.play.all.seektime+"&danmaku="+this.play.play.all.danmaku;
            }
            
            this.farme(this.player,"player/?url=" + Base64.encode(url));

            if (this.title && !live) {
                try {
                    top.document.title = "正在播放:【" + this.title + "】part " + (Number(this.part) + 1) + "-- " + this.mytitle;

                } catch (error) {
                    document.title = "正在播放:【" + this.title + "】part " + (Number(this.part) + 1) + "-- " + this.mytitle;

                }

            }

            if (!live) {
                this.live_num = "";
                setCookie("live_num", this.live_num, $this.timeout);
                this.onflag = 'yun';
                this.log("当前播放(云播)：" + word);

            } else {
                this.onflag = 'live';
                this.log("当前播放(直播)：" + word);
            }


        },
        /* 共用函数    云播 上集  */
        video_front: function ()
        {
            if (Number(this.part) <= 0) {
                return false;
            }
            this.part--;
            this.xyplay();
        },
        /* 共用函数  云播 下集  */
        video_next: function ()
        {
            if (Number(this.part) + 1 >= this.playlist_array.length) {
                return false;
            }
            this.part++;
            this.xyplay();
        },
        /* 共用函数  云播  停止处理  */
        endHandler: function ()
        {
            this.video_next();
        },

        /*  内部函数，加载广告  */
        loadad: function () {
            if (this.adsTime > 0)
            {
               this.farme(this.playad,"play.html?url=" + this.adsPage);
               $(this.playad).show();
            }
            setTimeout(function () {
                $(this.playad).empty().hide();
                $(this.player).show();
            }, this.adsTime * 1000);
        },
       
    /*  内部函数，加载解析  */
        loadjx: function (word,time) {
            word=word||"服务器正在解析中,请稍后....";
            time=time||2;
            if (time > 0)
            {
               this.echo(word,true,false,this.playad);
               $(this.playad).show();
            }
            setTimeout(function () {
                $(this.playad).empty().hide();
                $(this.player).show();
            }, time * 1000);
        },

        /*  内部函数，加载网页  */

        loadhtml: function (url, time) {

           this.farme(this.playad,url);

        },

        /*   内部函数，刷新线路列表   */
        reline: function ()
        {
            
            $(this.line).empty();
            //如果非搜索(wd)，则显示自动切换   
            if (this.tp !== "wd") {
                if (this.onflag === 'auto' ||(this.play.off.yun==="0" && this.onflag === 'yun'))
                {
                    $(this.line).append('<li class="click_work"  style="' + this.play.style.line_on + '" type="line" num="auto"> 自动√</li>');
                } else {
                    $(this.line).append('<li class="click_work" type="line" num="auto">自动</li>');
                }
            }

            //如果选择标志为云播或存在剧集数据或可本地播放,则显示云播
            if (this.play.off.yun === "1" && (this.onflag === 'yun' || this.playlist_array.length > 0 || this.lsplay('ext', this.url)))
            {

                //如果选择标志为云播，则选中云播

                if (this.onflag === 'yun')
                {
                    $(this.line).append('<li class="click_work"  style="' + this.play.style.line_on + '" type="line" num="yun">' + this.play.all.yun_title + '√</li>');
                } else {
                    $(this.line).append('<li class="click_work" type="line" num="yun">' + this.play.all.yun_title + '</li>');
                }
            }
            //如果解析开关为开非搜索(wd)且样式显示开关为开且解析，则显示线路

            if (this.play.off.jx==="1" && this.tp !== "wd" && this.play.style.line_show === "1" && "undefined" !== typeof this.play.define.jx_url && this.play.define.jx_url.length > 0)
            {
                for (var i = 0, len = this.play.define.jx_url.length; i < len; i++)
                {
                    var name = this.play.define.jx_url[i].split('=>')[0];

                    //如果如果选择标志为线路且与缓存线路相同则选中
                    if (this.onflag === 'line' && Number(this.myurl) === i)
                    {
                        $(this.line).append('<li class="click_work" style="' + this.play.style.line_on + '" type="line" num="' + i + '"> ' + name + '√</li>');
                    } else {
                        $(this.line).append('<li class="click_work" type="line" num="' + i + '"> ' + name + '</li>');
                    }
                }


            }
            ;
            //自定义链接
            if (this.play.off.mylink === "1") {
                for (var key in $this.play.define.jx_link) {
                    if (key !== "") {
                        $(this.line).append('<li class="click_work" type="link" num="' + key + '">' + key + '</li>');
                    }
                }
                ;
            }

            //使用说明
            if (this.play.off.help === "1" && !this.app) {
                $(this.line).append('<li class="click_work" type="line" num="h">使用说明</li>');
            }

            if (this.play.off.live === "1") {
                this.relive();
            }

        },

        //刷新直播		
        relive: function ()
        {
            $(this.plive).empty();


            for (var key in $this.play.define.live_url) {

                if (key === this.live_num && 'live' === this.onflag) {

                    $(this.plive).append('<li class="click_work " style="' + this.play.style.line_on + '" type="live" num="' + key + '">' + key + '√</li>');
                } else {

                    $(this.plive).append('<li class="click_work" type="live" num="' + key + '">' + key + '</li>');
                }
            }
            ;
        },

        /*  内部函数 后台刷新播放列表   */
        relist: function (autoflag)
        {
            this.reflaglist();
            this.replaylist(null, autoflag);

        },

        /*  内部函数 刷新来源列表  */
        reflaglist: function (flag)
        {
            $(this.flaglist).empty();
            this.flaglist_array = [];
            for (var i = 0, len = this.list_array.length; i < len; i++)
            {
                this.flaglist_array.push(this.list_array[i].flag);
                var flag_name=this.list_array[i].flag_name?this.list_array[i].flag_name:this.list_array[i].flag;
                
                if (i === this.pflag)
                {
                    $(this.flaglist).append('<li   class="click_work" type="flag" val="' + this.list_array[i].flag + '" num="' + i + '" style="' + this.play.style.play_on + '">' + flag_name + '</li>');
                } else {
                    $(this.flaglist).append('<li   class="click_work" type="flag" val="' + this.list_array[i].flag+ '" num="' + i + '">' + flag_name + '</li>');
                }
            }
        },

        /* 内部函数  刷新剧集列表  */
        replaylist: function (flag, autoflag) {

            if (!flag)
            {
                flag = this.pflag;
                //刷新换资源
                if (this.play.off.autoflag === "1" && autoflag === true) {
                    flag = getCookie("pflag");
                    if (flag === "") {
                        flag = 0;
                    } else {
                        flag++;
                    }
                    if (flag + 1 > this.list_array.length) {
                        flag = 0;
                    }
                    setCookie("pflag", flag, this.timeout);
                    this.pflag = flag;
                }
            }
            if ("undefined" !== typeof this.list_array[flag] && "undefined" !== typeof this.list_array[flag].video) {

                $(this.playlist).empty();
                this.playlist_array = [];
                var list = this.list_array[flag].video;

                //this.part=getCookie(this.listname)||(Number(data.part)-1);if(this.part>list.length || !this.part){this.part=0;}

                for (var i = 0, len = list.length; i < len; i++)
                {
                    var array = list[i].split("$");
                    //播放列表影片名过滤
                    var pat = new RegExp(this.play.match.video);
                    if (!this.play.video_match || !pat.test(array[0]))
                    {
                        this.playlist_array.push(array[1]);
                        if (i === Number(this.part))
                        {
                            $(this.playlist).append('<li class="click_work" type="list" num="' + i + '" style="' + this.play.style.play_on + '">' + array[0] + '√</li>');

                        } else {
                            $(this.playlist).append('<li class="click_work" type="list" num="' + i + '">' + array[0] + '</li>');
                        }
                    }
                }

            }

        },

        /*   内部函数   检测并设置滚动条   */
        setcroll: function ()
        {
            $(this.plist).scrollTop(10);
            if ($(this.plist).scrollTop() > 0) {
                $(this.plist).css("right", "0px");
            } else {
                $(this.plist).css("right", "-30px");
            }
            ;
            $(this.plist).scrollTop(0);
        },

        /*  内部函数 检测播放  */
        lsplay: function (type, word)
        {
            word = word || this.url;
            switch (type)
            {
               case 'play' :
                return  this.lsplay("ext", word)|| this.lsplay("type", this.type); 
                break;

                //检测扩展名是否能本地播放
                case 'ext' :
                    if (word === "") {
                        return false;
                    }
                    var n = word.search(/\.(ogg|mp4|webm|m3u8)/i);
                    if (n !== -1) {
                        return true;
                    } else if (this.type !== "") {
                        return isurl(this.play.match.playflag, this.type);
                    } else {
                        return false;
                    }
                    break;
                    //检测播放文件类型
                case 'type' :
                    if (word === "") {
                        return false;
                    }
                    var n = word.search(/(ogg|mp4|webm|m3u8|hls|video|normal)$/i);
                    if (n !== -1)
                    {
                        return true;
                    } else if (this.type !== "") {
                        return isurl(this.play.match.playflag, this.type);
                    } else {
                        return false;
                    }
                    break;

                   //检测urljmp设置  
                case 'urljmp' :
                    if (this.play.match.urljmp === "" || word === "") {
                        return false;
                    }
                    var strs = new Array();
                    var sjmp = new Array();
                    strs = this.play.match.urljmp.split(",");
                    for (var i = 0; i < strs.length; i++) {
                        sjmp = strs[i].split("->");
                        if (word.indexOf(sjmp[0]) > -1) {
                            return sjmp[1];
                        }
                    }
                    return "";

                    //检测flagjmp设置  
                case 'flagjmp' :
                    if (this.play.match.flagjmp === "" || word === "") {
                        return "";
                    }
                    var strs = new Array();
                    var sjmp = new Array();
                    strs = this.play.match.flagjmp.split(",");
                    for (var i = 0; i < strs.length; i++) {
                        sjmp = strs[i].split("->");
                        if (word.indexOf(sjmp[0]) > -1) {
                            return sjmp[1];
                        }
                    }
                    return "";


                    //检测urlurl设置  
                case 'urlurl' :
                    return isurl(this.play.match.urlurl, word);
                    //检测urlflag设置，如果来源标签含有设置内容将直链打开。 
                case 'urlflag' :
                    return isurl(this.play.match.urlflag, word);
                    //检测playflag设置，如果来源标签含有设置内容将调用ck播放器播放。 
                case 'playflag' :
                    return isurl(this.play.match.playflag, word);
                  //检测使用云播放的网站
                case 'yunflag' :
                    if(this.play.match.yunflag===""){return true;}
                    return isurl(this.play.match.yunflag, word);   
  
                default:
                    break;

            }
        },

        /* 公共函数： 显示或隐藏线路列表   */
        online: function (bottom)
        {
            if ($($this.line).css("display") === "none")
            {
                $this.reline();
                $($this.line).show();
            } else {
                if (this.autohide) {
                    $($this.line).hide();
                }
            }
        },

        /* 公共函数： 显示或隐藏播放列表   */
        onlist: function ()
        {
            if ($($this.playlist).css("display") === "none") {
                $this.relist();
            }
            if ($this.play.style.flaglist_show === "1") {
                $($this.flaglist).slideToggle();
            }
            if ($this.play.style.playlist_show === "1") {
                $($this.playlist).slideToggle();
            }
        },

        /* 公共函数： 输出 用户友好提示   */
        echo: function (word, lslogo, lsurl,obj)
        {
            //$(this.player).show();$(this.playad).hide;
            obj=obj||this.player;
            if (lsurl)
            {
                // if(this.lshttps(word)===-1){word=word.replace("http:","https:");}

                if (this.play.off.lshttps === "1" && "https:" === location.protocol) {
                    word = word.replace("http:", "https:");
                }
                this.farme(obj,"play.html?url=" + encodeURIComponent(word));
             
            } else {
                if (lslogo && this.loadimg)
                {
                    $(obj).html("<strong><br><br><br><br><br>" + word + "</strong><br><img border='0' src='" + this.loadimg + "'><br>");
                } else {
                    $(obj).html("<strong><br><br><br><br><br>" + word + "</strong>");
                }
            }
        },

        /*  公共函数   输出 超文本信息  */
        html: function (word,obj) {
            obj=obj||this.player;
            $(obj).html(word);
        },
        /*  内部函数   加载框架  */
       farme:function(obj,url){
           $(obj).html( '<iframe  width="100%" height="100%" src="' + url + '" frameborder="0" border="0" marginwidth="0" marginheight="0" scrolling="no" allowfullscreen="allowfullscreen"  mozallowfullscreen="mozallowfullscreen"  msallowfullscreen="msallowfullscreen" oallowfullscreen="oallowfullscreen" webkitallowfullscreen="webkitallowfullscreen"></iframe>');
       },
        /*   内部函数：输出 高亮调试信息  */
        onVer: function () {
            var message = "baidu by http://baidu.com";
            if (typeof console === 'object') {
                console.log("\n %c baidu %c http://baidu.com \n\n", "color: #fadfa3; background: #030307; padding:5px 0;", "background: #fadfa3; padding:5px 0;");
            } else if (typeof opera === 'object') {
                opera.postError(message);
            } else if (typeof java === 'object' && typeof java.lang === 'object') {
                java.lang.System.out.println(message);
            }
        },

        /*   公共函数：输出 调试信息  */
        log: function (message) {
            if ("undefined" !== typeof this.play && this.play.off.log === "1") {
                if (typeof console === 'object') {
                    console.log(message);
                } else if (typeof opera === 'object') {
                    opera.postError(message);
                } else if (typeof java === 'object' && typeof java.lang === 'object') {
                    java.lang.System.out.println(message);
                }
            }
        },

     

        /* 内部函数, 获取资源(ajax)初始 回调函数   */
        beforeSend: function (code, data)
        {
            if (data) {
                return;
            }
            ;
            switch (code)
            {
                //获取配置参数
                case 0:
                    this.echo("服务器正在载入配置,请稍后....");
                    break;

                    //获取线路列表
                case 1:
                    this.echo("服务器正在获取线路列表,请稍后....", true);
                    break;

                    //url查询数据库
                case 2:
                    this.echo(this.play['all']['link_info'], true);
                    break;

                    //获取云资源
                case 3:
                    this.echo(this.play['all']['yun_info'], true);

                    //后台获取云资源					 	
                default:
                    break;
            }
        },

        /* 共用函数  加载错误处理   */
        errorHandler: function (word)
        {
            word = !word ? '视频加载失败' : word;
            this.log("错误：" + word);
            var reload = getCookie("reload");
            if (reload !== window.location.href) {
                setCookie("reload", window.location.href, $this.timeout);
                window.location.replace(window.location.href);
            } else {
                setCookie("reload", "", $this.timeout);
                if (this.play.off.jx==='1' && "undefined" !== this.url_array && this.url_array.length > 0 ) {
                    this.jxplay(this.myurl, this.url);
                } else {
                    this.href("404.html");
                }

            }
        },
        loadjs: function (src)
        {
            var hm = document.createElement("script");
            hm.src = src;
            var s = document.getElementsByTagName("script")[0];
            s.parentNode.insertBefore(hm, s);
        }

        //end
    };

    window.xyplayer = xyplayer;


})();

